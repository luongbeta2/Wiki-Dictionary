<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.1.2">

    <issue
        id="GradleDeprecated"
        severity="Warning"
        message="&apos;android-library&apos; is deprecated; use &apos;com.android.library&apos; instead"
        category="Correctness"
        priority="6"
        summary="Deprecated Gradle Construct"
        explanation="This detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update."
        errorLine1="apply plugin: &apos;android-library&apos;"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/build.gradle"
            line="1"
            column="1"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 1): `android.util.LayoutDirection#RTL`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            return isAutoMirrored() &amp;&amp; MethodGetLayoutDirection.invoke(this) == LayoutDirection.RTL;"
        errorLine2="                                                                                ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconDrawable.java"
            line="304"
            column="81"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`he`&quot; should be called &quot;`iw`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.

Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.

To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-he"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`yi`&quot; should be called &quot;`ji`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.

Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.

To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-yi"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 4 (current min is 1): `android.os.Build.VERSION#SDK_INT`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {"
        errorLine2="                              ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/CompoundDrawables.java"
            line="46"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.Button#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconButton.java"
            line="17"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.Button#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconButton.java"
            line="25"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 4 (current min is 1): `android.os.Build.VERSION#SDK_INT`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.KITKAT) {"
        errorLine2="                          ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconDrawable.java"
            line="300"
            column="27"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.EditText#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconEditText.java"
            line="17"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.EditText#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconEditText.java"
            line="25"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.TextView#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconTextView.java"
            line="17"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.TextView#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconTextView.java"
            line="25"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.ToggleButton#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconToggleButton.java"
            line="17"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.ToggleButton#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (!isInEditMode()) {"
        errorLine2="             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconToggleButton.java"
            line="25"
            column="14"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 3 (current min is 1): `android.widget.CheckedTextView#isInEditMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (isInEditMode()) {"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconView.java"
            line="126"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 4 (current min is 1): `android.os.Build.VERSION#SDK_INT`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) {"
        errorLine2="                              ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconView.java"
            line="131"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 4 (current min is 1): `android.os.Build.VERSION#SDK_INT`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1) {"
        errorLine2="                          ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/src/com/shamanland/fonticon/FontIconView.java"
            line="166"
            column="27"/>
    </issue>

    <issue
        id="UsingHttp"
        severity="Warning"
        message="Replace HTTP with HTTPS for better security; use https\://services.gradle.org/distributions/gradle-1.12-all.zip"
        category="Security"
        priority="6"
        summary="Using HTTP instead of HTTPS"
        explanation="The Gradle Wrapper is available both via HTTP and HTTPS. HTTPS is more secure since it protects against man-in-the-middle attacks etc. Older projects created in Android Studio used HTTP but we now default to HTTPS and recommend upgrading existing projects."
        errorLine1="distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-all.zip"
        errorLine2="                ~~~~"
        quickfix="studio">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/gradle/wrapper/gradle-wrapper.properties"
            line="6"
            column="17"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.bool.layout_direction_rtl` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;bool name=&quot;layout_direction_rtl&quot;>false&lt;/bool>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-ar/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-dv/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-fa/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-he/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-ku/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-ldrtl/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-ps/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-sd/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-ug/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-ur/rtl.xml"
            line="3"
            column="11"/>
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res/values-yi/rtl.xml"
            line="3"
            column="11"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `res`: drawable-xxhdpi, drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Volumes/Data 2/CODE/Dictionary/dictionary_aard_android/fonticon/res"/>
    </issue>

</issues>
